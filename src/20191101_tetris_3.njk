---
title: Tetris 3
layout: base.njk
css: blog.css
---

<article id="post_3">
    <h1>Making Tetris in Rust and Wasm (Part 1)</h1>
    <h2>The Tetris Video Framework (Part 3)</h2>
    <h2 class='subheading'>Architecting the Tetris Video Framework</h2>
    <br>
    <p class="intro"><span id="dropcap">H</span>ello and welcome one and all to Robert 
    Snakard’s World Famous Tetris Video Framework! Step right up and enjoy this Rust 
    library of epic proportions! Only here will you see Results tried and returned, 
    Options twisted so tightly unwraps are used without measure, and who could forget the
    illustrious Piece museum! </p>
    <p class="intro">In our main file you’ll find the request_animation_frame loop. Trust me, this 
    little bit of recursion is one you won’t want to miss. You’ll be coming back again 
    and again and again and again. To the left you’ll find our App module which performs 
    unwrap after unwrap to create a beautiful CanvasRenderingContext and to the right is 
    the Game module. While its small we promise it will grow bigger in size as we add more 
    rules to the game.</p>
    <p class="intro">So please folks. Sit back, relax, and enjoy this edu-tainment today!</p>
    <h3>1 - Creating a new project</h3>
    <p>We’re finally starting our project now. We’ve done the background research. We know 
    how to write HTML, we know how to write Rust, now let’s make something useful.</p>
    <p><img src="imgs/tetris_3/new_project.png"
            alt="Bash prompt showing multiple bash commands and their successful completion. Source
                 is on my github at src/source/tetris_3/new_project.png"
            title="New Project">
    <br>
    You’ve done this before. Create a new Cargo project, initialize your git repository (if 
    things aren’t working double check your 
    <a href="https://help.github.com/en/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account"
       title="Github Tutorial. Create and manage SSH keys">ssh keys</a>!), and push your 
    first commit to master. Oh, and install 
    <a href="https://github.com/rustwasm/wasm-pack"
       title="Wasm-Pack Github source+Readme">wasm-pack</a>:
    <img src="imgs/tetris_3/install_wasm_pack.png" 
         alt="Bash prompt showing the bash command 'cargo install wasm-pack` and its 
              successful completion."
         title="Install Wasm Pack">
    <br>
    We’ll use this, combined with <code>wasm-bindgen</code>, to make importing and exporting 
    from Javascript easier.</p>
    <p>Now lets open <code>Cargo.toml</code></br>
    <img src="imgs/tetris_3/new_dependencies.png" 
         alt="Cargo.toml file with new lines highlighted in green. We've added two new 
              dependencies: 'wasm-bindgen' and 'web-sys'. You can see the source on my 
              github at src/source/tetris_3/new_dependencies.toml"
         title="New Dependencies">
    <br>
    We want to add two dependencies to our project. The 
    <a href="https://crates.io/crates/wasm-bindgen"
       title="Wasm-Bindgen crates.io page"><code>wasm-bindgen</code></a> crate and the 
    <a href="https://crates.io/crates/web-sys"
       title="Web-Sys crates.io page"><code>web-sys</code></a> crate. Wasm-bindgen is 
    used to create javascript-to-webassembly bindings so we don’t need to do all that ugly 
    string collecting I showed you in the last post. Web-sys gives us access to javascript 
    functions like <code>canvas.getContext()</code>.</p>
    <p>Speaking of:<br>
    <img src="imgs/tetris_3/hello_world.png" 
         alt="Some Rust code that I've visually divided into 3 parts. The first part is 4 'use'
             statements that import the external packages we need. The second part is the start 
             of a function 'hello_world()'. At the start we initialize a bunch of DOM elements. 
             The third part is the second half of the 'hello_world()' function. Here we draw to 
             a CanvasRenderingContext. You can see the source on my github at 
             src/source/tetris_3/hello_world.rs"
         title="Hello World">
    <br>
    This is our <code>src/lib.rs</code>. The blue 
    <a href="https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html#processing-a-guess"
       title="Link to a portion of the Rust book explaining 'use' statements">imports our
    dependencies</a>, the purple 
    <a href="https://www.w3schools.com/js/js_htmldom_methods.asp"
       title="W3School's intro on the HTML DOM">sets up our DOM</a>, and the green calls 
    <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect"
       title="MDN's documentation on the CanvasRenderingContext2D">fillRect</a>. Notice the 
    <code>#[wasm_bindgen(start)]</code>. This lets us compile with wasm-pack instead of cargo 
    so we can import our package as an ES6 module.<br>
    <img src="imgs/tetris_3/wasmpack_first_compile.png" 
         alt="Bash prompt showing the command 'wasm-pack build --target web' and its successful
              completion."
         title="Wasm-Pack First Compile"></p>
    <p>Wasm-pack compiles our package into the pkg directory where we have a host of files.<br>
    <img src="imgs/tetris_3/wasmpack_file_explorer.png" 
         alt="Bash prompt showing prompt from the previous image with the same 'wasm-pack build 
              --target web' output. It then lists the pkg directory generated by the wasm-pack
              command by using the command'ls /pkg'."
         title="Wasm-Pack File Explorer">
    <br>
    The only important ones are the <code>.js</code> one and <code>.wasm</code> one. You 
    use them like so:<br>
    <img src="imgs/tetris_3/index.png" 
         alt="Index.html file importing our WebAssembly as an ES6 module. The source can be 
              found on my github at src/source/tetris_3/index.html"
         title="Index">
    <br>
    <code>tetris.js</code> is glue code. It includes code to access memory, pass strings, and 
    import/export functions. <code>tetris_bg.wasm</code> is our binary. We import the glue 
    code so it’s accessible for everyone, then init our binary. When we call <code>init</code>,  
    <code>init</code> will call whatever function we labelled as <code>#[wasm_bindgen(start)]
    </code>. This is how we will enter our webapp.</p> 
    <p>Now, let’s see if it runs.<br>
    <img src="imgs/tetris_3/first_firefox.png" 
         alt="Firefox window displaying the index.html file running our WebAssembly code. 
              A red square is displayed near the center of our canvas."
         title="First Firefox">
    <br>
    Yay!</p>
    <h3>2 - Laying A Foundation</h3>
    <p>When writing any piece of code it’s important to lay a good foundation. When writing 
    Rust, triply so. Javascript is extremely flexible. If you make an architecture mistake
    it’s easy to hack in a quick fix. Rust, you can’t hack.</p>
    <p>So what does a game of Tetris require? We need some way to draw pieces, we need some 
    way to create pieces, we need some way to move pieces, and we need some way to detect 
    collisions. Today we’re focusing on the “draw pieces” side of things but we’ll add everything 
    to the blueprint.<br>
    <img src="imgs/tetris_3/game_blueprint.png" 
         alt="A version of lib.rs with 4 empty functions: 'move_piece()', 'draw_piece()', 
              'create_piece()', and 'detect_collisions()'. You can find the source on my 
              github at src/source/tetris_3/game_blueprint.rs"
         title="Game Blueprint">
    <br>
    And then focus on <code>draw_piece()</code>.<br>
    <img src="imgs/tetris_3/zim_fold.png" 
         alt="The same version of lib.rs, this time with all functions except 'draw_piece()'
              folded. Folding is a mechanism in Vim used to hide code. The purpose of this
              image is to demonstrate that functionality."
         title="Zim Fold">
    <br>
    You can do the folding with <a href="http://vimdoc.sourceforge.net/htmldoc/fold.html#zf"
                                   title="Vim Docs on folding">zim fold</a>, <code>zfi{</code>.</p>
    <h3> 3 - Beginning Construction </h3>
    <p> Now we ask ourselves a question. Where do we start drawing a piece? In this case we 
    have some drawing functionality already, so let’s start with what we already have.</p>
    <p>I’ve moved our <code>hello_world</code> code into <code>draw_piece()</code> and added 
    comments. I like to organize my code into lots of small messes so refactoring is easier.<br>
    <img src="imgs/tetris_3/draw_piece_first_edition.png" 
         alt="lib.rs again with draw_piece filled out with our red-square-drawing code from 
              earlier. We've also removed our 'hello_world()' function and replaced it with a 
              function named 'run()'. You can find the source on my github at
              src/source/tetris_3/draw_piece_first_edition.rs"
         title="Draw Piece First Edition">
    <br>
    Ok. But we still need to draw a piece, and drawing the piece is a very key part of Tetris.</p>
    <p> I’ll admit, I actually got a little bit of analysis paralysis at this part. If we want 
    to draw a piece we have to know what a piece is. And depending on how you look at it a piece 
    can be a lot of different things. Now I did 
    <a href="https://github.com/DavideCanton/rust-tetris/blob/master/src/pieces.rs#L223"
       title="An example of how to implement tetris piece mapping">a</a> 
    <a href="https://meatfighter.com/nintendotetrisai/#Representing_Tetriminos"
       title="Another example of how to implement tetis piece mapping">lot</a> 
    <a href="https://github.com/chvin/react-tetris/blob/master/src/unit/const.js"
       title="A third example of how to implement tetris piece mapping">of</a> 
    <a href="https://tetris.fandom.com/wiki/SRS" 
       title="The tetris wiki on piece representation">research</a> on this part trying to 
    find the best way to represent a piece. I settled on an 
    <a href="https://doc.rust-lang.org/book/ch03-02-data-types.html#the-array-type"
       title="The array chapter of the Rust Book">array</a>.<br>
    <img src="imgs/tetris_3/draw_piece_second_edition.png" 
         alt="This is the same draw_piece function with a length-16 array shaped in a 4x4 square. 
              The values are either 0 or 1 with the 1s forming the shape of a T block. The source 
              can be found on my github at src/source/tetris_3/draw_piece_second_edition.rs"
         title="Draw Piece Second Edition">
    <br>
    Which is great and all, but using an array means we have to traverse it. And traversing 
    arrays is an entire <a href="https://en.wikipedia.org/wiki/Functional_programming"
                           title="Wikipedia entry on Function programming">category 
    of programming</a> all by itself. We’ll just use a 
    <a href="https://doc.rust-lang.org/book/ch03-05-control-flow.html#looping-through-a-collection-with-for"
       title="Rust book chapter on control flow and for loops">for loop</a> because it is 
    the most straight forward to understand.</p>
    <p> IMPORTANT: <a href="https://www.learn-c.org/en/Arrays"
                      title="Link describing arrays in C, including zero indexing">
    ARRAYS START AT 0</a>!!<br>
    <img src="imgs/tetris_3/draw_piece_third_edition.png" 
         alt="The second-edition draw piece function with more additions. We define some 
              constants so we know they're there, I'm hesitant to use them for fear of 
              cluttering the screenshot. After that we've got our for loop that loops over 
              our piece array and draws a square every time it sees a '1'. The source can 
              be found on my github at src/source/tetris_3/draw_piece_third_edition.rs"
         title="Draw Piece Third Edition">
    <br>
    Whew, that's a mouthful!</p>
    <p> We’ve got our for loop, which starts at 0 (the first item in the list), and ends 
    <a href="https://doc.rust-lang.org/rust-by-example/flow_control/for.html"
       title="Rust-By-Example on for loops">one before</a> the length, which leaves us
    with a bit of math.</p>
    <p>Since you’ve played around with fillRect you’ll know we have to set the location of 
    the square and then the size. The size can be pretty much anything, set it first though 
    cause we also use it in our location. To set the location, take a look at the way we 
    organized our <code>piece</code> array.</p>
    <pre><code> 
    0, 1, 0, 0,
    1, 1, 1, 0,
    0, 0, 0, 0,
    0, 0, 0, 0,
    </code></pre><p> 16 spots: 4 rows, 4 in a row. Now <code>4x4=16</code> so we know to 
    <a href="https://en.wikipedia.org/wiki/Inverse_function#Inverses_in_calculus"
       title-"Wikipedia entry on Inverse Operations">go backwards</a> we’ll need to divide.</p>
    <p>Let’s checkout spot number 6. We start at 0, count left to right, and hit this one. 
    Row 1, Index 2.</p>
    <pre><code> 
    0, 1, 0, 0,
    1, 1, 1, 0,
    0, 0, 0, 0,
    0, 0, 0, 0,
    </code></pre><p> What’s 6 divided by 4? 1 remainder 2.</p>
    <p> You can try the math for any index in the array, 3/4 = 0R3, 13/4 = 3R1. As long as 
    you start counting at 0 the math will always work out to be your graphical coordinates. 
    The xcoord uses <code>%</code>, the 
    <a href="https://blog.mattclemente.com/2019/07/12/modulus-operator-modulo-operation.html"
       title="Blog post teaching the modulus/remainder operator">remainder operator</a>, and 
    the ycoord uses <code>/</code>, the 
    <a href="https://press.rebus.community/programmingfundamentals/chapter/integer-division-and-modulus/"
       title="Programming lesson teaching how integer division operates">divide-and-truncate
    operator</a>. It’s one of those beautiful coincidences in mathematics.<br>
    <img src="imgs/tetris_3/t_block_firefox.png" 
         alt="Firefox window with a red T-block drawn in the top left corner of the canvas"
         title="T Block Firefox"></p>
    <h3> 4 - Pack up the Tent </h3>
    <p>The whole point of architecting and modularizing and organizing your code is to make 
    it portable. We want to organize the code into bite-sized chunks so we can create a sane 
    API and call them where they’re needed. We currently have a <code>draw_piece()</code> 
    function. When I call it I’d like to specify which piece I’m drawing, how it’s rotated, 
    and where on the tetris board it’s located, so let’s do that:<br>
    <img src="imgs/tetris_3/draw_piece_enums.png" 
         alt="Our same lib.rs file with the 'run()' and 'draw_piece()' functions. In this file
              we've now added two enums, 'Tetronimo' and 'Rotation'. I've also separated some
              of the code to get the context into its own function. You can find the source on 
              my github at src/source/tetris_3/draw_piece_enums.rs"
         title="Draw Piece Enums">
    <br>
    You'll notice I changed the function signature, and we now get the context outside of 
    the `draw_piece()` function. These are done for two different reasons. I want my function 
    to take shape, rotation, and coordinate arguments because we're going to be calling it to 
    draw every piece, no matter its shape, rotation, and location. I want my function to take 
    a context argument because we're going to be calling this function a lot. We don't want to 
    create and destroy the context every time we have to redraw a piece, it's better to create 
    it once and pass it around as a permanent resource.</p>
    <p>Create another file named <code>src/pieces.rs</code></p>
    <p><img src="imgs/tetris_3/pieces_rs.png" 
            alt="A new file 'src/pieces.rs'. The only thing this file contains is a really big array.
                I've got the completed code on my github at https://github.com/robert-snakard/tetris
                but you can also find the source under src/source/tetris_3/pieces_rs.rs"
            title="Pieces.rs">
    <br>
    <p> I won’t make you define that whole thing, you can find the source on my github. What 
    we’ve done though is define every piece and each of their rotations in a file named <code>
    src/pieces.rs</code>. Now we can import them just like we did with our dependencies.<br>
    <img src="imgs/tetris_3/import_pieces.png" 
         alt="Our lib.rs file again. This time we have a 'use' statement importing the PIECE array
              from pieces.rs. There's also some new code in 'draw_piece()' that uses the PIECE
              array to draw. The source can be found on my github at 
              src/source/tetris_3/import_pieces.rs"
         title="Import Pieces">
    <br>
    And then use our function parameters.<br>
    <img src="imgs/tetris_3/call_draw_piece.png" 
         alt="lib.rs again. We've replaced our static Tetronimo and Rotation with our function
              paramters. We've also added our xcoord and ycoord parameters to our draw function.
              The source can be found on my github at src/source/tetris_3/call_draw_piece.rs"
         title="Call Draw Piece">
    <br>
    And while we’re at it, let’s split our code into <code>game</code> and <code>app</code> 
    modules<br>
    <img src="imgs/tetris_3/app_and_game_modules.png" 
         alt="This time I've split lib.rs into 'game.rs' and 'app.rs'. There is a little bit of
              code left in 'lib.rs'. You can find the full source in my robert-snakard/tetris.git
              repo but the source is also available at src/source/tetris_3/app_and_game_modules.rs.
              In this file the modules are separated with 'mod' brackets. In the actual code
              they're separate files."
         title="'app' and 'game' modules">
    <br>
    And reorganize the whole thing altogether!<br>
    <img src="imgs/tetris_3/rearchitecture.png" 
         alt="This is the final version of this week's code. There are four files and four modules,
              'lib.rs', 'game.rs', 'app.rs', 'pieces.rs'. You can find the full source in my tetris
              repo at https://github.com/robert-snakard/tetris but there is also a single-file source
              available at src/source/tetris_3/rearchitecture.rs"
         title="Rearchitecture">
    <br>
    So what did we do?</p>
    <p> We reorganized. I decided to split the game into two parts. The <code>game</code> module, 
    which consists of everything we do when playing the game, and the <code>app</code> module, 
    which contains all our javascript/web-sys code. Lastly I added our <code>enums</code> to the 
    pieces file, they just seemed to fit there best.</p>
    <p> A lot of organizing is arbitrary, like I could have put <code>draw_piece</code> in 
    <code>app</code>. I mean it does use the <code>CanvasRenderingContext</code>! The thing is, 
    it also uses the <code>PIECE</code> array and I had to decide whether I wanted <code>web-sys
    </code> to bleed into <code>game</code> or <code>pieces</code> to bleed into <code>app</code>.
    I chose the former.</p>
    <p> You’re always going to have tradeoffs when programming and re-architecturing sucks so 
    oftentimes it will be on you to decide if the duct-tape fix is safe enough. In one of these 
    articles I’ll show you how to make a wrapper and we’ll wrap <code>ctx</code> with a nice 
    pretty bow, but for now it’s exposed to the world. Because it’s easier that way.</p>
    <p><img src="imgs/tetris_3/last_firefox.png" 
            alt="Firefox windown showing a purple T block near the middle of the canvas."
            title="Last Firefox"></p>
</article>
