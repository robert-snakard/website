---
title: Tetris 1
layout: base.njk
css: blog.css

og_title: "Tetris and Wasm Part 1: HTML, Javascript, and the Canvas Rendering Context"
og_desc: "Blog post describing how to make an HTML file, how to embed javascript, and how to access world-class graphics libraries using the canvas rendering context"
og_img: "img/og.png"
---
<article>
  <h1>Making Tetris in Rust and Wasm (Part 1)</h1> 
  <h2>The Tetris Video Framework (Part 1)</h2>
  <h2 class="subheader">HTML, Javascript, and the CanvasRenderingContext</h2>
  <br>
  <p class="note">Note: This post ended up a lot longer than I intended so I've split it
  in to two articles. They're still written as if they're one article.
  Keep that in mind.</p>
  <br>
  <p class="intro"><span id="dropcap">S</span>ince the dawn of time people have been making
  flash games. <a href="https://www.latimes.com/archives/la-xpm-1997-oct-09-ca-40708-story.html" 
                  title="LA Times article">In 1995, classicgames.com</a> 
  made its way on to the world stage with the classics:
  Solitaire, Checkers, and Poker.
  <a href="https://gimletmedia.com/shows/reply-all/j4hlx6/105-at-worlds-end" 
     title="Gimlet Media podcast episode">Newgrounds followed in 1977</a>
  with its classics: Club a Seal, Assassin, Three Foot Ninja. Now 
  flash is dead, burned to dust by the likes of Mozilla Firefox and 
  Google Chrome, and a new hero is rising. HTML5 and the &lt;canvas&gt; element.
  Joined by Rust and WebAssembly I will use these tools to create... 
  a complete game of Tetris.</p>
  <p class="intro">In this post I take a look at the canvas element, Rust/WASM compilation,
  and embedding a WASM applet in JS. Follow me on my journey to learn the 
  ins and outs of the Modern Day Flash Game.</p>
  <h3>1 - Lets start at the very beginning</h3>
  <p>Like everything in this too-much-information age it's often difficult
  to know where to start. There are so many tutorials out there that all 
  start differently and teach you different things. Below I've listed 
  some of the ones I read. We'll start at the very beginning, with a 
  file.</p>
  <br>
  <p><a href="http://www.chinedufn.com/3d-webgl-basic-water-tutorial/">
    http://www.chinedufn.com/3d-webgl-basic-water-tutorial/</a>
  <br><a href="https://rustwasm.github.io/docs/book/">https://rustwasm.githu
    b.io/docs/book/</a>
  <br><a href="https://www.pmg.com/blog/my-firsthand-experience-with-rust-webassembly/">
    https://www.pmg.com/blog/my-firsthand-experience-with-rust-webassembly/</a>
  <br><a href="https://www.reddit.com/r/rust/comments/9t95fd/howto_setting_up_ webassembly_on_stable_rust/">
    https://www.reddit.com/r/rust/comments/9t95fd/howto _setting_up_webassembly_
    on_stable_rust/</a>
  <br><a href="https://dev.to/dandyvica/wasm-in-rust-without-nodejs-2e0c">https://dev
    .to/dandyvica/wasm-in-rust-without-nodejs-2e0c</a></p>
  <br>
  <p>And now the file:<br>
  <img src="imgs/initial_file.png" 
       alt="Computer desktop showing blank html document named 'index.html'" 
       title="Initial File">
  <br>Create a file <code>index.html</code> and open it up in your favorite text editor<br>
  <img id="notepadpp"
       src="imgs/empty_index.png" 
       alt="Notepad++ showing the skeleton index.html with an h1 tag: 'Tetris'. Go to my 
            github and find src/source/empty_index for the source" 
       title="Empty Index">
  <br>Start with a basic HTML skeleton. There are better ones out there.
  You can tell me about them in the comments. For now we're using this
  skeleton. It has a doctype and two meta tags.</p> 
  <p>The doctype is important. It tells your web browser what kind of 
  document you have. It's also vestigial. You'll always use the HTML5
  <code>!doctype html</code>. You can view the official list of other doctypes 
  <a href="https://www.w3.org/QA/2002/04/valid-dtd-list.html" 
     title="The W3C 'Valid DTD' list">here</a>.</p>
  <p>The two meta tags are also important. The charset tag guarantees your 
  fonts are rendered correctly eg when using emoji or Mandarin. The 
  viewport tag is important due to the wide range of device sizes in 
  today's world. Notice how my blog renders on mobile without the need 
  for a separate mobile site. I got these from <a href="https://htmlhead.dev">
    htmlhead.dev</a>.</p>
  <p>Now open <code>index.html</code> in your favorite web browser.
  <img src="imgs/skeleton_firefox.png" 
       alt="Screenshot of index.html open in firefox. 'Tetris' is displayed on the page"
       title="Skeleton Firefox">
  <br>If yours doesn't look like mine you did something wrong. Look at your 
  code, compare it to mine, do some research, browse Stack Overflow. 
  If nothing's working feel free to email me or comment below.</p>
  <h3>2 - A very good place to start</h3>
  <p>Now we're gonna take a look at some javascript, some graphics, and compile 
  our first wasm.<br>
  <img src="imgs/start_2.png" 
       alt="index.html with a canvas element. Go to my github and find src/source/start_2 for the source" 
       title="Start 2">
  <br>First make your webpage look like mine. We've added a title and an icon, 
  a canvas, and a link to this blog. </p>
  <p>The title is simple. It's the name of your webpage. You can see it at 
  the top there next to the <code>favicon.ico</code>. It says "Tetris" 
  instead of "index.html". To generate the favicon head to head over to a 
  favicon generator, I used <a href="https://favicon.io">favicon.io.</a></p>
  <p>Next is the canvas element. Unlike many elements it's got its own width 
  and height attributes (usually you'll control an object's size with the 
  <code>style</code> tag). This is because canvas is a rendering element, it's our 
  graphics bread and butter. Style is applied as a final touch of displaying 
  a web page and canvas needs to have its width and height available for 
  its computations. Speaking of computations, check out the 
  <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API" 
     title="The canvas MDN page">canvas MDN page</a> for more canvas guides, 
   tutorials and libraries and look at the javascript below.<br>
   <img src="imgs/javascript_1.png"
        alt="index.html after adding some javascript to draw a rectangle on our canvas element. Go to my github and find src/source/javascript_1 for the source"
        title="Javascript 1">
   <br>First thing we did was add some script tags so we can write some javascript. 
   These can go anywhere and you'll often see them in the <code>head</code> so they don't 
   ruin formatting. Next thing we did was get our canvas. 
   <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document#Methods" 
      title="A list of methods you can apply to `document`">
     <code>getElementsByTagName</code></a> 
   will return every canvas element in the <code>document</code> (on the page). We only 
   have 1 canvas element so we know our canvas element will be the 0th item 
   in the returned list. We use it to get our rendering context.</p>
  <p>The rendering context is what we use to draw to the screen. We're using the 
  2d rendering context but therer are also the 
  <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext" 
     title="Description of the canvas element's `getContext()` method">
    bitmap and webgl2 contexts</a> 
  available. The 2d rendering context has some basic built in drawing 
  functions. Similar to the tools you'd find in Paint rather than Illustrator 
  or Photoshop. Speaking of though, there are some vector graphics functions like 
  <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc"
     title="the 2d rendering context's `arc()` method.">Arc</a>, 
  <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo"
     title="the 2d rendering context's `lineTo()` method.">LineTo</a>, and 
  <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo"
     title="the 2d rendering context's `bezierCurveTo()` method.">BezierCurveTo</a>.</p>
  <p>We drew a rectangle.<br>
  <img src="imgs/javascript_2.png"
       alt="index.html after adding more javascript that adds text to our canvas element. Go to my github and find src/source/javascript_2 for the source."
       title="Javascript 2"> 
  <br>And added some text.<br>
  <img src="imgs/hal9000.png" 
       alt="A HAL9000 replica drawn entirely in javascript. See src/source/HAL9000 for the source" 
       title="HAL9000">
  <br>Draw the rest of the fucking owl.</p>
  <h3>3 - Rust and Web Assembly</h3>
  <p>So yea, I did an art project instead of finishing up this article. It
  <em>was</em> getting really long though and I <em>was</em> going to have to split it into
  3 movies anyway, so goodbye, Here's a picture of a cat.</p>
  <p><img src="imgs/kitty.jpg" 
          alt="A sleepy kitty snoozing in a sleepy kitty hammock" 
          title="Kitty"></p>
</article>
